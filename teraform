1.	create and configure a vpc, subnet, route table, etc. with terraform, Ec2 instance and a load balancer with terraform.
provider "aws" {
region = "ap-south-1"
access_key = AKIAU4YT4CN2WSSEVNNL
secret_key = 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

}

resource "aws_instance" "my1" {
ami = "ami-07d3a50bd29811cd1"
instance_type = "t2.micro"

tags = {
Name = "ece2_3"
}
}

resource "aws_vpc" "vpc1" {
cidr_block = "10.0.0.0/16"
#instance_tenancy = "default"

tags = {
Name = "vpc1"
}
}

resource "aws_subnet" "sub1" {
vpc_id = aws_vpc.vpc1.id
cidr_block = "10.0.0.0/24"

tags = {
Name = "sub1"
}

}

 Initialize the Terraform environment

csharp
Copy code
terraform init

by Create a VPC with Terraform

arduino
Copy code
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

then Create a subnet within the VPC

python
Copy code
resource "aws_subnet" "my_subnet" {
  cidr_block = "10.0.1.0/24"
  vpc_id     = aws_vpc.my_vpc.id
}

then Create a route table for the VPC

python
Copy code
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_internet_gateway.id
  }
}

then Create an EC2 instance within the subnet

java
Copy code
resource "aws_instance" "my_instance" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.my_subnet.id

  tags = {
    Name = "MyEC2Instance"
  }
}

then Create a load balancer within the VPC

csharp
Copy code
resource "aws_lb" "my_lb" {
  name               = "my-lb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.my_subnet.id]

  security_groups = [aws_security_group.lb_sg.id]

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}

then Configure the load balancer listener and target group

bash
Copy code
resource "aws_lb_listener" "my_lb_listener" {
  load_balancer_arn = aws_lb.my_lb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_lb_target_group.my_lb_target_group.arn
    type             = "forward"
  }
}

resource "aws_lb_target_group" "my_lb_target_group" {
  name     = "my-lb-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.my_vpc.id

  health_check {
    healthy_threshold   = 2
    interval            = 30
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    unhealthy_threshold = 2
  }
}

by Attach the EC2 instance to the target group

java
Copy code
resource "aws_lb_target_group_attachment" "my_lb_target_group_attachment" {
  target_group_arn = aws_lb_target_group.my_lb_target_group.arn
  target_id        = aws_instance.my_instance.id
  port             = 80
}

to Configure the security group for the load balancer

python
Copy code
resource "aws_security_group" "lb_sg" {
  name_prefix = "lb_sg"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port = 80
    to_port   = 80
    protocol  = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
